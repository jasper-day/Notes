{
  "hash": "85e273575959ccc3606ea32fa5b2f15f",
  "result": {
    "markdown": "# Python Language Syntax\n\n* Python was originally developed as a teaching language\n\n* The cleanliness of Python's syntax has led some to call it \"executable pseudocode\"\n\n* This is a third bullet point\n\nSyntax refers to the structure of the language (i.e., what constitutes a correctly-formed program).\n\n## Example\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=1}\n``` {.python .cell-code}\n# set the midpoint\nmidpoint = 5\n\n# make two empty lists\nlower = []; upper = []\n\n# split the numbers into lower and upper\nfor i in range(10):\n    if (i < midpoint):\n        lower.append(i)\n    else:\n        upper.append(i)\n        \nprint(\"lower:\", lower)\nprint(\"upper:\", upper)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlower: [0, 1, 2, 3, 4]\nupper: [5, 6, 7, 8, 9]\n```\n:::\n:::\n\n\nAt this point in time, this script might not make a lot of sense to you, but it compactly illustrates several of the important aspects of the Python syntax.\nLet's walk through it and discuss some of the syntactical features of Python\n\n## Comments Are Marked by ``#``\n\nThe script starts with a comment (this means that python won't read this line....but this is very useful to provide information about your code):\n``` python\n# set the midpoint\n```\nComments in Python are indicated by ``#``, and anything on the line following the numbers sign is ignored by the interpreter.\n\nThis means, for example, that you can have stand-alone comments like the one just shown, as well as inline comments that follow a statement. For example:\n``` python\nx += 2  # shorthand for x = x + 2\n```\nSo above, Python reads the first bit of code, but ignores the 'comment' \n\n## End-of-Line Terminates a Statement\nThe next line in the script is\n``` python\nmidpoint = 5\n```\nThis is an assignment operation, where we've created a variable named ``midpoint`` and assigned it the value ``5``.\nNotice that the end of this statement is simply marked by the end of the line.\n\nIn Python, if you'd like a statement to continue to the next line, it is possible to use the \"``\\``\" marker to indicate this:\n\n::: {.cell slideshow='{\"slide_type\":\"skip\"}' execution_count=2}\n``` {.python .cell-code}\nx = 1 + 2 + 3 + 4 +\\\n    5 + 6 + 7 + 8\n```\n:::\n\n\nIt is also possible to continue expressions on the next line within parentheses (or brackets), without using the \"``\\``\" marker:\n\n::: {.cell slideshow='{\"slide_type\":\"skip\"}' execution_count=3}\n``` {.python .cell-code}\nx = (1 + 2 + 3 + 4 +\n     5 + 6 + 7 + 8)\n```\n:::\n\n\nThe best way is to use the line continuation (within parentheses).\n\n## Semicolon Can Optionally Terminate a Statement\nSometimes it can be useful to put multiple statements on a single line.\n\nThe next portion of the script is\n``` python\nlower = []; upper = []\n```\nThis shows the example of how the semicolon (``;``) can be used optionally in Python to put two statements on a single line.\n\nThis is exactly the same as writing the below:\n``` python\nlower = []\nupper = []\n```\nUsing a semicolon to put multiple statements on a single line is generally discouraged by most Python style guides, though occasionally it proves convenient.\n\n## Indentation: Whitespace Matters!\n\n* We must use indentation (or more specific - 4 spaces!) \n\n* The top line will be the controlling statement.\n\n* Indented code blocks are always preceded by a colon (``:``)\n\n* Anything indented below this top line will occur within it. \n\nFor example, the following two snippets will produce different results!\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=4}\n``` {.python .cell-code}\nx = 5\nif x < 4:\n    y = x * 2\n    print(x)\n```\n:::\n\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=5}\n``` {.python .cell-code}\nx = 5\nif x < 4:\n    y = x * 2\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n**Python's use of meaningful whitespace leads to much more consistent and readable code than languages that do not enforce indentation of code blocks.**\n\n## Whitespace *Within* Lines Does Not Matter\nWhile the mantra of *meaningful whitespace* holds true for whitespace *before* lines (which indicate a code block), white space *within* lines of Python code does not matter.\nFor example, all three of these expressions are equivalent:\n\n::: {.cell slideshow='{\"slide_type\":\"skip\"}' execution_count=6}\n``` {.python .cell-code}\nx=1+2\nx = 1 + 2\nx             =        1    +                2\n```\n:::\n\n\nUsing whitespace effectively can lead to much more readable code, \nespecially in cases where operators follow each other – compare the following two expressions for exponentiating by a negative number:\n``` python\nx=10**-2\n```\nto\n``` python\nx = 10 ** -2\n```\n\n## Parentheses Are for Grouping or Calling\n\nIn the previous code snippet, we see two uses of parentheses.\nFirst, they can be used in the typical way to group statements or mathematical operations:\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=7}\n``` {.python .cell-code}\n2 * (3 + 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n14\n```\n:::\n:::\n\n\nThey can also be used to indicate that a *function* is being called.\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=8}\n``` {.python .cell-code}\n# example\nL = [4,2,3,1]\nL.sort()\nprint(L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4]\n```\n:::\n:::\n\n\nThe \"``()``\" after ``sort`` indicates that the function should be executed, and is required even if no arguments are necessary.\n\n## Strings! \n\nOne of the most simple and important aspects of python you will be using constantly will be strings! \n\nStrings are designated by single or double quotation marks. \n\n``` python\n\n\"This is my python string\" \n\n'This is my second python string'\n``` \n\nWe will be using 'strings' throughout our whole Python lifetime. \n\nThings to remember:\n\n* Strings are not numbers. You'd have to convert them to a number if you want to use them in math operations. \n\n* Floating numbers are needed due to memory limitations: we cannot have infinitely precise numbers! - They take the form of scientific notation. We can represent extremely large and small numbers in a very compact and efficient way.\n\n::: {.cell slideshow='{\"slide_type\":\"skip\"}' execution_count=9}\n``` {.python .cell-code}\nx = \"4\" \nprint(\"String: \", type(x),      x)\n\nx = int(x)\nprint(\"Integer: \", type(x),    x)\n\nx = float(x)\nprint(\"Float: \", type(x),    x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nString:  <class 'str'> 4\nInteger:  <class 'int'> 4\nFloat:  <class 'float'> 4.0\n```\n:::\n:::\n\n\n## Aside: A Note on the ``print()`` Function\n\nAbove we used the example of the ``print()`` function.\nThe ``print()`` function is one piece that has changed between Python *2.x* and Python *3.x*. In Python 2, ``print`` behaved as a statement: that is, you could write\n``` python\n# Python 2 only!\n>> print \"first value:\", 1\nfirst value: 1\n```\nFor various reasons, the language maintainers decided that in Python 3 ``print()`` should become a function, so we now write\n``` python\n# Python 3 only!\n>>> print(\"first value:\", 1)\nfirst value: 1\n```\nThis is one of the many backward-incompatible constructs between Python 2 and 3.\n\n## References\n* The most widely used style guide in Python is known as PEP8, and can be found at https://www.python.org/dev/peps/pep-0008/.\n\n* *A Whirlwind Tour of Python* by Jake VanderPlas (O’Reilly). Copyright 2016 O’Reilly Media, Inc., 978-1-491-96465-1\n\n## License\nOpen MIT License, adapted from the Python Course 2020 developed by Cefas (Centre for Environment, Fisheries and Aquaculture Science) and Python Course for SENSE (Centre for Satellite Data in Environmental Science) PhD students 2020.\n\n",
    "supporting": [
      "1-Python-Syntax_files"
    ],
    "filters": [],
    "includes": {}
  }
}